import logger from '../config/logger.ts';
import { sendMessageToGpt } from '../lib/gpt.ts';
import type TelegramConnection from '../lib/TelegramConnection.ts';
import type TelegramBot from 'node-telegram-bot-api';
import { getAuthorName } from '../lib/tgUtils.ts';

const conversations = new Map<
  number,
  {
    gptConversationId?: string;
    gptParentMessageId?: string;
    lastMessageTime?: number;
  }
>();

export async function startNewTopic(
  telegramConnection: TelegramConnection,
  chatId: number
): Promise<void> {
  conversations.delete(chatId);
  await telegramConnection.bot.sendMessage(chatId, 'üí¨ –û —á—ë–º –µ—â—ë –ø–æ–≥–æ–≤–æ—Ä–∏–º?');
}

export default async function message(
  telegramConnection: TelegramConnection,
  msg: TelegramBot.Message
): Promise<void> {
  const chatId = msg.chat.id;
  const currentTime = Date.now();
  const conversationData = conversations.get(chatId);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—à–µ–ª –ª–∏ —á–∞—Å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (conversationData?.lastMessageTime !== undefined) {
    const timeDifference = currentTime - conversationData.lastMessageTime;
    const oneHourInMs = 60 * 60 * 1000;

    if (timeDifference > oneHourInMs) {
      // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
      conversations.delete(chatId);
      await telegramConnection.bot.sendMessage(
        chatId,
        '‚è∞ –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —á–∞—Å–∞ —Å –Ω–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ù–∞—á–∏–Ω–∞—é –Ω–æ–≤—É—é —Ç–µ–º—É!'
      );
    }
  }

  const { bot } = telegramConnection;

  try {
    const thinkingMessage = await bot.sendMessage(chatId, 'ü§î –î—É–º–∞—é...');
    const thinkingMessageId = thinkingMessage.message_id;

    const updatedConversationData = conversations.get(chatId);

    let accumulatedText = '';
    let lastEditTime = Date.now();
    const MIN_EDIT_INTERVAL = 1000; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –≤ –º—Å

    const response = await sendMessageToGpt({
      text: msg.text ?? '',
      conversationId: updatedConversationData?.gptConversationId,
      parentMessageId: updatedConversationData?.gptParentMessageId,
      onBusy: async () => {
        await bot.sendMessage(chatId, 'üòÆ‚Äçüí® –ë–æ—Ç —É—Å–µ—Ä–¥–Ω–æ —Ç—Ä—É–¥–∏—Ç—Å—è, –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–∂–∫–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å');
      },
      onBroken: async () => {
        await bot.sendMessage(
          chatId,
          'üíî –° –±–æ—Ç–æ–º —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ú—ã –ø–æ—á–∏–Ω–∏–º –µ–≥–æ –∏ —Å–æ–æ–±—â–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.'
        );
      },
      onChunk: async (chunk: string) => {
        accumulatedText += chunk;
        const currentTime = Date.now();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
        if (currentTime - lastEditTime >= MIN_EDIT_INTERVAL) {
          try {
            await bot.editMessageText(accumulatedText + '...', {
              chat_id: chatId,
              message_id: thinkingMessageId,
            });
            lastEditTime = currentTime;
          } catch (editError) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è)
          }
        }
      },
    });

    // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    if (accumulatedText !== response.text) {
      try {
        await bot.editMessageText(response.text, {
          chat_id: chatId,
          message_id: thinkingMessageId,
        });
      } catch (editError) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.sendMessage(chatId, response.text);
      }
    }

    conversations.set(chatId, {
      gptConversationId: response.conversationId,
      gptParentMessageId: response.id,
      lastMessageTime: currentTime,
    });

    logger.info(`Query from ${getAuthorName(msg) ?? 'unknown'}`);
  } catch (error) {
    console.log(error);
    await telegramConnection.bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
    );
  }
}
